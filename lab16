// Binary search tree using linked list
#include <stdio.h>
#include <stdlib.h>
struct TreeNode
{
    struct TreeNode *left;
    int data;
    struct TreeNode *right;
};
struct TreeNode *createNode(int value)
{
    struct TreeNode *node = (struct TreeNode *)malloc(sizeof(struct TreeNode));
    node->data = value;
    node->left = node->right = NULL;
    return node;
}

struct TreeNode *insert(struct TreeNode *root, int value)
{
    if (root == NULL)
        return createNode(value);
    else if (value < root->data)
        root->left = insert(root->left, value);
    else if (value > root->data)
        root->right = insert(root->right, value);

    return root;
}

void preorder(struct TreeNode *root)
{
    if (root != NULL)
    {
        printf("%d", root->data);
        preorder(root->left);
        preorder(root->right);
    }
}
void inorder(struct TreeNode *root)
{
    if (root != NULL)
    {
        inorder(root->left);
        printf("%d", root->data);
        inorder(root->right);
    }
}
void postorder(struct TreeNode *root)
{
    if (root != NULL)
    {
        postorder(root->left);
        postorder(root->right);
        printf("%d", root->data);
    }
}

struct TreeNode *findMin(struct TreeNode *root)
{
    while (root->left != NULL)
    {
        root = root->left;
    }
    return root;
}

struct TreeNode *search(struct TreeNode *root, int value)
{
    if (root == NULL)
        return NULL;
    else if (root->data == value)
        return root;
    else if (value < root->data)
        return search(root->left, value);
    else
        return search(root->right, value);
}

struct TreeNode *delete(struct TreeNode *root, int value)
{
    if (root == NULL)
        return NULL;

    if (value < root->data) // return root
        root->left = delete(root->left, value);
    else if (value > root->data)
        root->right = delete(root->right, value);
    else
    {
        if (root->left == NULL && root->right == NULL)
        { // leaf node
            free(root);
            return NULL;
        }
        else if (root->right == NULL)
        { // only left child
            struct TreeNode *temp = root->left;
            free(root);
            return temp;
        }
        else if (root->left == NULL)
        { // only right child
            struct TreeNode *temp = root->right;
            free(root);
            return temp;
        }
        else
        { // 2 child
            struct TreeNode *temp = findMin(root->right);
            root->data = temp->data;
            root->right=delete(root->right, temp->data);
        }
    }
    return root;
}
int main()
{
    struct TreeNode *root = NULL;
    struct TreeNode *pos = NULL;
    int n, choice, index, target;
    while (1)
    {
        printf("1. Insert\n");
        printf("2. Pre-Order\n");
        printf("3. In-Order\n");
        printf("4. Post-order\n");
        printf("5. Level Order\n");
        printf("6.Search\n");
        printf("7.Delete\n");
        printf("8.Exit\n");
        printf("Enter Choice");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
            printf("Enter the value of N : ");
            scanf("%d", &n);
            root = insert(root, n);
            break;
        case 2:
            printf("\n Pre-Order: ");
            preorder(root);
            break;
        case 3:
            printf("\n In-Order: ");
            inorder(root);
            break;
        case 4:
            printf("\n Post-Order: ");
            postorder(root);
            break;
        case 5:
            printf("\n Post-Order: ");
            postorder(root);
            break;
        case 6:
            printf("Enter Target");
            scanf("%d", &target);
            pos = search(root, target);
            if (pos == NULL)
                printf("Element not found\n");
            else
                printf("Element found \n");
            break;
        case 7:
            printf("Enter element to delete:");
            scanf("%d", &target);
            delete(root, target);
            break;

        case 8:
            exit(0);
            break;
        default:
            printf("Invalid Choice !!!!\n");
        }
        printf("\n");
        system("pause"); // without pressing system will not work
    }
    return 0;
}
